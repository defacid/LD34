<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_person</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>msk_person</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction = 0.1;

xscale = 1;
yscale = 1;
angle = 0;
color = make_color_rgb(155 + random(100), 155 + random(100), 155 + random(100));
alpha = 1;
image_speed = 0.3;

squash = 0;
maxSquash = 0.5;

tween = 0;
maxTween = 0.25;

maxRun = 3;
maxSpeed = 5;

held = 0;
tilt = 0;
height = 0;

selected = 0;

leafAngle = 60 - random(90);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_person">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!held) {
    var oSpeed, colDir;
    oSpeed = speed;
    colDir = point_direction(x, y, other.x, other.y);
    
    speed = -speed;
    motion_add(colDir + 180, oSpeed + 0.3);
    
    if (speed &gt; maxRun) speed = maxRun;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dir, dis, flip;
    dir = point_direction(x, y, mouse_x, mouse_y);
    dis = point_distance(x, y, mouse_x, mouse_y);
    flip = 1;
    
if (held) image_speed = 0.5;
else if (speed == 0) image_index = 0;
else image_speed = speed/10;

if (tween &gt; maxTween) tween = maxTween;

if (tween &gt; 0) tween -= (1 - tween)/16;
else tween = 0;

if (squash &gt; maxSquash) squash = maxSquash;

if (squash &gt; 0) squash -= (1 - squash)/16;
else squash = 0;

if (height &gt; 0) {
    height -= 3;
    friction = 0;
}
if (height &lt; 0) {
    friction = 0.1;
    height = 0;
    squash = 0.25;
}

draw_set_alpha(0.25);
draw_set_color(c_black);
draw_ellipse(x - 8 - height/8, y + 12 - 2 - height/8, x + 8 + height/8, y + 12 + 2 + height/8, 0); 

draw_set_alpha(1);

if (held) {
    height = 20;
    x = mouse_x;
    y = mouse_y;
    
    tilt += 5;
    angle = 15*dcos(tilt);
    
    draw_sprite_ext(spr_person, image_index, x, y - height, (xscale - tween)*flip, yscale - squash, angle, color, alpha);
    draw_sprite_ext(spr_leaves, 1, x + lengthdir_x(10*(1-squash), 90 + angle) + lengthdir_x(6, 90), y - height + lengthdir_y(10*(1-squash), 90 + angle) + lengthdir_y(6, 90), xscale - tween, (yscale - squash), 30, color, alpha);
    draw_sprite_ext(spr_head, 5, x + lengthdir_x(10*(1-squash), 90 + angle), y - height + lengthdir_y(10*(1-squash), 90 + angle), xscale - tween, (yscale - squash)*flip, 0, color, alpha);
}
else if (selected){
    if (dir &gt; 90 &amp;&amp; dir &lt; 270) flip = -1;
    
    draw_sprite_ext(spr_person, image_index, x, y - height, (xscale - tween)*flip, yscale - squash, angle, color, alpha);
    draw_sprite_ext(spr_leaves, 1, x + lengthdir_x(10*(1-squash), 90 + angle) + lengthdir_x(6, dir), y - height + lengthdir_y(10*(1-squash), 90 + angle) + lengthdir_y(6, dir), xscale - tween, (yscale - squash)*flip, dir + 30, color, alpha);
    draw_sprite_ext(spr_head, 4, x + lengthdir_x(10*(1-squash), 90 + angle), y - height + lengthdir_y(10*(1-squash), 90 + angle), xscale - tween, (yscale - squash)*flip, dir, color, alpha);
    
    draw_set_color(c_black);
    draw_circle(x, y - 32, 4, 0);
    draw_set_color(color);
    draw_circle(x, y - 32, 3, 0);
    
    if (dis &gt; 6 &amp;&amp; speed &lt; maxRun) motion_add(dir, 0.2);
}
else {
    
    draw_sprite_ext(spr_person, image_index, x, y - height, (xscale - tween)*flip, yscale - squash, angle, color, alpha);
    draw_sprite_ext(spr_leaves, 1, x + lengthdir_x(10*(1-squash), 90 + angle) + lengthdir_x(6, 90), y - height + lengthdir_y(10*(1-squash), 90 + angle) + lengthdir_y(6, 90), xscale - tween, (yscale - squash)*flip, 30, color, alpha);
    draw_sprite_ext(spr_head, 0, x + lengthdir_x(10*(1-squash), 90 + angle), y - height + lengthdir_y(10*(1-squash), 90 + angle), (xscale - tween)*flip, yscale - squash, 0, color, alpha);
}

depth = -y;
if (speed &gt; maxSpeed) speed = maxSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
