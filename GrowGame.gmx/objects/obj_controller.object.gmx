<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview;
y = view_wview;
camX = 0;
camY = 16;
angle = 0;
alpha = 1;
camAlpha = 1;
canFade = 0;
canFollow = 1;
alarm[0] = room_speed*3;

image_speed = 0.05;

canTarget = 1;
target = noone;

cursorState = 0;

repeat(50) {
    var r = irandom(2);
    tile_add(bkg_grass, r*16, 0, 16, 16, random(room_width), random(room_height), 10000);
}

mouseLastX = 0;
mouseLastY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canFade = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dir, dis, flip, camDir, camDis, camFlip;
dir = point_direction(x, y, mouse_x, mouse_y);
camDir = point_direction(camX, camY, mouse_x, mouse_y);
dir = point_distance(x, y, mouse_x, mouse_y);

camFlip = 1;
if (camDir &gt; 90 &amp;&amp; camDir &lt; 270) camFlip = -1;

if (canFade &amp;&amp; camAlpha &gt; 0) {
    camAlpha -= 0.05;
}

x -= (x - mouse_x)/80;

if ((abs(camX - mouse_x) &gt; 208)) canFollow = 1;

if (canFollow) {
    if (abs(camX - mouse_x) &gt; 64) camX -= (camX - mouse_x)/16;
    else canFollow = 0;
}

draw_sprite_ext(spr_camera, image_index, camX, camY, 1, camFlip, camDir, c_white, 1);

if (instance_exists(obj_person)) {
    if (canTarget) {
        target = instance_nearest(mouse_x, mouse_y, obj_person);
        
        if (point_distance(target.x, target.y, mouse_x, mouse_y) &lt; 16) {
            if (mouse_check_button_pressed(mb_left)) {
                canTarget = 0;
                target.held = 1;
                
                cursorState = 1;
            }
            
            if (mouse_check_button_pressed(mb_right)) {
                target.selected = 1 - target.selected;
            }
        }
    }
    else {
        if (mouse_check_button_released(mb_left)) {
            target.held = 0;
            target.angle = 0;
            target.direction = point_direction(mouseLastX, mouseLastY, mouse_x, mouse_y);
            target.speed = point_distance(mouseLastX, mouseLastY, mouse_x, mouse_y)/16;
            target = noone;
            canTarget = 1;
            
            cursorState = 0;
        }
    }
}

draw_sprite_ext(spr_cursor, cursorState, mouse_x + cursorState*4, mouse_y - cursorState*24, 1, 1, -90*cursorState, c_white, 1);

if (keyboard_check(vk_escape)) game_end();

mouseLastX = mouse_x;
mouseLastY = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
